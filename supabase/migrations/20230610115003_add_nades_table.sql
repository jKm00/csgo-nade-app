create table "public"."nades" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "type" text not null,
    "lineup_x" real not null,
    "lineup_y" real not null,
    "impact_x" real not null,
    "impact_y" real not null,
    "lineup_img" text,
    "impact_img" text,
    "strat_id" bigint not null
);


alter table "public"."nades" enable row level security;

CREATE UNIQUE INDEX nades_pkey ON public.nades USING btree (id);

alter table "public"."nades" add constraint "nades_pkey" PRIMARY KEY using index "nades_pkey";

alter table "public"."nades" add constraint "nades_strat_id_fkey" FOREIGN KEY (strat_id) REFERENCES strats(id) ON DELETE CASCADE not valid;

alter table "public"."nades" validate constraint "nades_strat_id_fkey";

create policy "Enable delete of nades for strat authors"
on "public"."nades"
as permissive
for delete
to public
using ((strat_id IN ( SELECT s.id
   FROM (strats s
     JOIN profiles p ON ((p.id = s.author_id)))
  WHERE (p.uuid = auth.uid()))));


create policy "Enable insert for strat authors"
on "public"."nades"
as permissive
for insert
to authenticated
with check ((strat_id IN ( SELECT s.id
   FROM (strats s
     JOIN profiles p ON ((p.id = s.author_id)))
  WHERE (p.uuid = auth.uid()))));


create policy "Enable read access for public and private nades"
on "public"."nades"
as permissive
for select
to public
using (((strat_id IN ( SELECT s.id
   FROM strats s
  WHERE (s.privacy = 'PUBLIC'::text))) OR (strat_id IN ( SELECT s.id
   FROM (strats s
     JOIN profiles p ON ((p.id = s.author_id)))
  WHERE ((s.privacy = 'PRIVATE'::text) AND (p.uuid = auth.uid())))) OR (strat_id IN ( SELECT s.id
   FROM (((strats s
     FULL JOIN teams t ON ((t.id = s.team_id)))
     FULL JOIN team_members tm ON ((tm.team_id = t.id)))
     JOIN profiles p ON ((p.id = tm.player_id)))
  WHERE ((s.privacy = 'PRIVATE'::text) AND (p.uuid = auth.uid()))))));


create policy "Enable update of nades for start authors"
on "public"."nades"
as permissive
for update
to public
using ((strat_id IN ( SELECT s.id
   FROM (strats s
     JOIN profiles p ON ((p.id = s.author_id)))
  WHERE (p.uuid = auth.uid()))))
with check ((strat_id IN ( SELECT s.id
   FROM (strats s
     JOIN profiles p ON ((p.id = s.author_id)))
  WHERE (p.uuid = auth.uid()))));




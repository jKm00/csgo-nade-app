create table "public"."lobbies" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "uid" uuid not null default gen_random_uuid(),
    "team_id" bigint not null,
    "lobby_leader" bigint not null
);


alter table "public"."lobbies" enable row level security;

create table "public"."lobby_members" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "lobby_id" bigint not null,
    "player_id" bigint not null
);


alter table "public"."lobby_members" enable row level security;

CREATE UNIQUE INDEX lobbies_pkey ON public.lobbies USING btree (id);

CREATE UNIQUE INDEX lobby_members_pkey ON public.lobby_members USING btree (id);

alter table "public"."lobbies" add constraint "lobbies_pkey" PRIMARY KEY using index "lobbies_pkey";

alter table "public"."lobby_members" add constraint "lobby_members_pkey" PRIMARY KEY using index "lobby_members_pkey";

alter table "public"."lobbies" add constraint "lobbies_lobby_leader_fkey" FOREIGN KEY (lobby_leader) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."lobbies" validate constraint "lobbies_lobby_leader_fkey";

alter table "public"."lobbies" add constraint "lobbies_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."lobbies" validate constraint "lobbies_team_id_fkey";

alter table "public"."lobby_members" add constraint "lobby_members_lobby_id_fkey" FOREIGN KEY (lobby_id) REFERENCES lobbies(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."lobby_members" validate constraint "lobby_members_lobby_id_fkey";

alter table "public"."lobby_members" add constraint "lobby_members_player_id_fkey" FOREIGN KEY (player_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."lobby_members" validate constraint "lobby_members_player_id_fkey";

create policy "Disable updating of lobbies"
on "public"."lobbies"
as permissive
for update
to public
using (false)
with check (false);


create policy "Enable delete for lobby leaders"
on "public"."lobbies"
as permissive
for delete
to public
using ((lobby_leader = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))));


create policy "Enable insert for authenticated users only"
on "public"."lobbies"
as permissive
for insert
to authenticated
with check ((auth.uid() IS NOT NULL));


create policy "Enable read access for all members in the lobby"
on "public"."lobbies"
as permissive
for select
to public
using (((lobby_leader = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))) OR (id = ( SELECT lm.lobby_id
   FROM (lobby_members lm
     LEFT JOIN profiles p ON ((p.id = lm.player_id)))
  WHERE (p.uuid = auth.uid())))));


create policy "Enable insert for lobby leader"
on "public"."lobby_members"
as permissive
for insert
to authenticated
with check ((lobby_id IN ( SELECT l.id
   FROM (lobbies l
     LEFT JOIN profiles p ON ((p.id = l.lobby_leader)))
  WHERE (p.uuid = auth.uid()))));




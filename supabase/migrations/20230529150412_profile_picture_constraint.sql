alter table "public"."profiles" drop constraint "profiles_uuid_fkey";

drop view if exists "public"."profile_teams";

create table "public"."profile_pictures" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "filename" text not null
);

insert into "public"."profile_pictures" (filename)
values ('profile_1.png');

alter table "public"."profile_pictures" enable row level security;

alter table "public"."profiles" alter column "profile_picture" set default '1'::bigint;

alter table "public"."profiles" alter column "profile_picture" set data type bigint using "profile_picture"::bigint;

CREATE UNIQUE INDEX profile_pictures_filename_key ON public.profile_pictures USING btree (filename);

CREATE UNIQUE INDEX profile_pictures_pkey ON public.profile_pictures USING btree (id);

alter table "public"."profile_pictures" add constraint "profile_pictures_pkey" PRIMARY KEY using index "profile_pictures_pkey";

alter table "public"."profile_pictures" add constraint "profile_pictures_filename_key" UNIQUE using index "profile_pictures_filename_key";

alter table "public"."profiles" add constraint "profiles_profile_picture_fkey" FOREIGN KEY (profile_picture) REFERENCES profile_pictures(id) ON DELETE SET DEFAULT not valid;

alter table "public"."profiles" validate constraint "profiles_profile_picture_fkey";

alter table "public"."profiles" add constraint "profiles_uuid_fkey" FOREIGN KEY (uuid) REFERENCES auth.users(id) not valid;

alter table "public"."profiles" validate constraint "profiles_uuid_fkey";

create or replace view "public"."profile_teams" as  SELECT p.id AS player_id,
    p.uuid AS profile_uuid,
    t.name AS team_name,
    t.id AS team_id,
    t.organization AS org,
    tm.role AS player_role,
    tm.inserted_at AS joined_at,
    count(*) OVER (PARTITION BY t.id) AS total_players
   FROM ((team_members tm
     JOIN teams t ON ((tm.team_id = t.id)))
     JOIN profiles p ON ((tm.player_id = p.id)));


create policy "Enable delete for admins"
on "public"."profile_pictures"
as permissive
for delete
to public
using ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id = ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));


create policy "Enable insert for admins"
on "public"."profile_pictures"
as permissive
for insert
to public
with check ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id = ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));


create policy "Enable read access for all users"
on "public"."profile_pictures"
as permissive
for select
to public
using (true);


create policy "Enable update for admins"
on "public"."profile_pictures"
as permissive
for update
to public
using ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id = ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))))
with check ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id = ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));




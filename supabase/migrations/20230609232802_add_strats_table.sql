create table "public"."strats" (
    "id" bigint generated by default as identity not null,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "name" text not null,
    "description" text not null,
    "strat_position" text not null,
    "privacy" text not null,
    "map_id" bigint not null,
    "team_id" bigint,
    "player_id" bigint not null
);


alter table "public"."strats" enable row level security;

CREATE UNIQUE INDEX strats_pkey ON public.strats USING btree (id);

alter table "public"."strats" add constraint "strats_pkey" PRIMARY KEY using index "strats_pkey";

alter table "public"."strats" add constraint "fk_map" FOREIGN KEY (map_id) REFERENCES maps(id) not valid;

alter table "public"."strats" validate constraint "fk_map";

alter table "public"."strats" add constraint "fk_player" FOREIGN KEY (player_id) REFERENCES profiles(id) not valid;

alter table "public"."strats" validate constraint "fk_player";

alter table "public"."strats" add constraint "fk_team" FOREIGN KEY (team_id) REFERENCES teams(id) not valid;

alter table "public"."strats" validate constraint "fk_team";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.has_access_to_private_strat(_user_id uuid, _strat_id bigint)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
AS $function$select exists (
  select 1
  from strats s
  left join profiles p on p.id = s.player_id
  left join teams t on t.id = s.team_id
  full outer join team_members tm on tm.team_id = t.id
  full outer join profiles p2 on p2.id = tm.player_id
  where s.id = _strat_id and (p.uuid = _user_id or p2.uuid = _user_id)
)$function$
;

create policy "Enable insert for authenticated users only"
on "public"."strats"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable select for public and private strats"
on "public"."strats"
as permissive
for select
to public
using (((privacy = 'PUBLIC'::text) OR ((privacy = 'PRIVATE'::text) AND has_access_to_private_strat(auth.uid(), id))));


create policy "Enable strat authors to delete strat"
on "public"."strats"
as permissive
for delete
to public
using ((player_id IN ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))));


create policy "Enable strat authors to update strat"
on "public"."strats"
as permissive
for update
to public
using ((player_id IN ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))))
with check ((player_id IN ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))));




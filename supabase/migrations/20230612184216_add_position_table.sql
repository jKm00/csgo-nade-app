create table "public"."positions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "img" text not null,
    "map_id" bigint not null
);


alter table "public"."positions" enable row level security;

alter table "public"."strats" drop column "strat_position";

alter table "public"."strats" add column "position_id" bigint;

CREATE UNIQUE INDEX positions_pkey ON public.positions USING btree (id);

alter table "public"."positions" add constraint "positions_pkey" PRIMARY KEY using index "positions_pkey";

alter table "public"."positions" add constraint "positions_map_id_fkey" FOREIGN KEY (map_id) REFERENCES maps(id) ON DELETE CASCADE not valid;

alter table "public"."positions" validate constraint "positions_map_id_fkey";

alter table "public"."strats" add constraint "strats_position_id_fkey" FOREIGN KEY (position_id) REFERENCES positions(id) not valid;

alter table "public"."strats" validate constraint "strats_position_id_fkey";

create policy "Enable delete for users based on user_id"
on "public"."positions"
as permissive
for delete
to public
using (false);


create policy "Enable insert for authenticated users only"
on "public"."positions"
as permissive
for insert
to public
with check (false);


create policy "Enable read access for all users"
on "public"."positions"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."positions"
as permissive
for update
to public
using (false)
with check (false);




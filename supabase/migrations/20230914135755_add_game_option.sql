-- create games table
create table "public"."games" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "short_name" text not null,
    "full_name" text not null
);

CREATE UNIQUE INDEX games_pkey ON public.games USING btree (id);

alter table "public"."games" add constraint "games_pkey" PRIMARY KEY using index "games_pkey";

-- enable rls and set the different rules
alter table "public"."games" enable row level security;

create policy "Enable delete for admin users"
on "public"."games"
as permissive
for delete
to public
using ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id IN ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));


create policy "Enable insert for admins only"
on "public"."games"
as permissive
for insert
to authenticated
with check ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id IN ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));


create policy "Enable read access for all users"
on "public"."games"
as permissive
for select
to public
using (true);


create policy "Enable update for admin users"
on "public"."games"
as permissive
for update
to public
using ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id IN ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))))
with check ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id IN ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));

-- add csgo and cs2 to the new table
INSERT INTO "public"."games" (full_name, short_name) 
VALUES 
   ('Counter-Strike: Global Offensive', 'CS:GO'),
   ('Counter-Strike 2', 'CS2');

-- add game column to strats referencing a game in games table with a default value as "CS:GO"
alter table "public"."strats" add column "game_id" bigint not null default '1'::bigint;

alter table "public"."strats" add constraint "strats_game_fkey" FOREIGN KEY (game_id) REFERENCES games(id) ON DELETE RESTRICT not valid;

alter table "public"."strats" validate constraint "strats_game_fkey";






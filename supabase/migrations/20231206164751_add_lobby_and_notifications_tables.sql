drop policy "Enable read access for all members in the lobby" on "public"."lobbies";

drop policy "Disable updating of lobbies" on "public"."lobbies";

drop policy "Enable insert for authenticated users only" on "public"."lobbies";

drop policy "Enable insert for lobby leader" on "public"."lobby_members";

create table "public"."notification_type" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null
);


alter table "public"."notification_type" enable row level security;

create table "public"."notifications" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp without time zone not null default now(),
    "type" bigint not null,
    "recipient_id" bigint not null,
    "reference_id" bigint not null,
    "status" character varying not null default 'PENDING'::character varying,
    "details" jsonb,
    "sender_id" bigint not null
);


alter table "public"."notifications" enable row level security;

CREATE UNIQUE INDEX notification_type_pkey ON public.notification_type USING btree (id);

CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id);

alter table "public"."notification_type" add constraint "notification_type_pkey" PRIMARY KEY using index "notification_type_pkey";

alter table "public"."notifications" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."notifications" add constraint "notifications_recipient_id_fkey" FOREIGN KEY (recipient_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "notifications_recipient_id_fkey";

alter table "public"."notifications" add constraint "notifications_sender_id_fkey" FOREIGN KEY (sender_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "notifications_sender_id_fkey";

alter table "public"."notifications" add constraint "notifications_type_fkey" FOREIGN KEY (type) REFERENCES notification_type(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table "public"."notifications" validate constraint "notifications_type_fkey";

create policy "Enable read access for all members and invited players"
on "public"."lobbies"
as permissive
for select
to public
using (((id IN ( SELECT lm.lobby_id
   FROM (lobby_members lm
     LEFT JOIN profiles p ON ((p.id = lm.player_id)))
  WHERE (p.uuid = auth.uid()))) OR (lobby_leader = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))) OR (id IN ( SELECT n.reference_id
   FROM (notifications n
     LEFT JOIN profiles p ON ((p.id = n.recipient_id)))
  WHERE (p.uuid = auth.uid())))));


create policy "Enable delete for users based on user_id"
on "public"."lobby_members"
as permissive
for delete
to public
using (((player_id = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))) OR (lobby_id IN ( SELECT l.id
   FROM (lobbies l
     LEFT JOIN profiles p ON ((p.id = l.lobby_leader)))
  WHERE (p.uuid = auth.uid())))));


create policy "Enable read access for all"
on "public"."lobby_members"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."lobby_members"
as permissive
for update
to public
using (false)
with check (false);


create policy "Disable delete access"
on "public"."notification_type"
as permissive
for delete
to public
using (false);


create policy "Disable insert access"
on "public"."notification_type"
as permissive
for insert
to authenticated
with check (false);


create policy "Disable update access"
on "public"."notification_type"
as permissive
for update
to public
using (false)
with check (false);


create policy "Enable read access for all users"
on "public"."notification_type"
as permissive
for select
to public
using (true);


create policy "Disable delete"
on "public"."notifications"
as permissive
for delete
to public
using (false);


create policy "Enable insert for authenticated users only"
on "public"."notifications"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."notifications"
as permissive
for select
to public
using ((recipient_id = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))));


create policy "Enable update for notified user or sender"
on "public"."notifications"
as permissive
for update
to public
using (((recipient_id = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))) OR (sender_id = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid())))))
with check (((recipient_id = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))) OR (sender_id = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid())))));


create policy "Disable updating of lobbies"
on "public"."lobbies"
as permissive
for update
to public
using ((lobby_leader = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))))
with check ((lobby_leader = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))));


create policy "Enable insert for authenticated users only"
on "public"."lobbies"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable insert for lobby leader"
on "public"."lobby_members"
as permissive
for insert
to authenticated
with check (true);

-- insert notification types
INSERT INTO notification_type (name) VALUES
('LOBBY_INVITE'),
('TEAM_INVITE')


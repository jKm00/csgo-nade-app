create table "public"."profiles" (
    "id" bigint generated by default as identity not null,
    "uuid" uuid not null,
    "name" character varying not null,
    "username" character varying not null,
    "email" character varying not null,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."profiles" enable row level security;

create table "public"."roles" (
    "id" bigint generated by default as identity not null,
    "name" character varying not null default ''::character varying
);


alter table "public"."roles" enable row level security;

create table "public"."user_roles" (
    "id" bigint generated by default as identity not null,
    "user_id" bigint not null,
    "role_id" bigint not null
);


alter table "public"."user_roles" enable row level security;

CREATE UNIQUE INDEX "Roles_pkey" ON public.roles USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX user_roles_pkey ON public.user_roles USING btree (id);

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."roles" add constraint "Roles_pkey" PRIMARY KEY using index "Roles_pkey";

alter table "public"."user_roles" add constraint "user_roles_pkey" PRIMARY KEY using index "user_roles_pkey";

alter table "public"."profiles" add constraint "profiles_uuid_fkey" FOREIGN KEY (uuid) REFERENCES auth.users(id) not valid;

alter table "public"."profiles" validate constraint "profiles_uuid_fkey";

alter table "public"."user_roles" add constraint "user_roles_role_id_fkey" FOREIGN KEY (role_id) REFERENCES roles(id) not valid;

alter table "public"."user_roles" validate constraint "user_roles_role_id_fkey";

alter table "public"."user_roles" add constraint "user_roles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."user_roles" validate constraint "user_roles_user_id_fkey";

create policy "Enable delete for users based on uuid"
on "public"."profiles"
as permissive
for delete
to public
using ((auth.uid() = uuid));


create policy "Enable insert for authenticated users only"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on uuid"
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = uuid))
with check ((auth.uid() = uuid));


create policy "Enable read access for all users"
on "public"."roles"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."user_roles"
as permissive
for select
to public
using (true);




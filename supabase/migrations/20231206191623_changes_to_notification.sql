drop policy "Disable delete access" on "public"."notification_type";

drop policy "Disable insert access" on "public"."notification_type";

drop policy "Disable update access" on "public"."notification_type";

drop policy "Enable read access for all users" on "public"."notification_type";

drop policy "Enable read access for all users" on "public"."notifications";

drop policy "Enable players to accept inivtations" on "public"."team_members";

alter table "public"."notifications" drop constraint "notifications_type_fkey";

alter table "public"."notification_type" drop constraint "notification_type_pkey";

drop index if exists "public"."notification_type_pkey";

drop table "public"."notification_type";

create table "public"."notification_types" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null
);


alter table "public"."notification_types" enable row level security;

CREATE UNIQUE INDEX notification_type_pkey ON public.notification_types USING btree (id);

alter table "public"."notification_types" add constraint "notification_type_pkey" PRIMARY KEY using index "notification_type_pkey";

alter table "public"."notifications" add constraint "notifications_type_fkey" FOREIGN KEY (type) REFERENCES notification_types(id) ON UPDATE RESTRICT ON DELETE RESTRICT not valid;

alter table "public"."notifications" validate constraint "notifications_type_fkey";

create policy "Disable delete access"
on "public"."notification_types"
as permissive
for delete
to public
using (false);


create policy "Disable insert access"
on "public"."notification_types"
as permissive
for insert
to authenticated
with check (false);


create policy "Disable update access"
on "public"."notification_types"
as permissive
for update
to public
using (false)
with check (false);


create policy "Enable read access for all users"
on "public"."notification_types"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."notifications"
as permissive
for select
to public
using (((recipient_id = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))) OR (sender_id = ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid())))));


create policy "Enable players to accept inivtations"
on "public"."team_members"
as permissive
for insert
to public
with check (((player_id IN ( SELECT p.id
   FROM profiles p
  WHERE (p.uuid = auth.uid()))) AND (team_id IN ( SELECT n.reference_id
   FROM (notifications n
     LEFT JOIN profiles p ON ((p.id = n.recipient_id)))
  WHERE (p.uuid = auth.uid())))));




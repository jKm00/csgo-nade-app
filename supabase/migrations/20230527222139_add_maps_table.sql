drop view if exists "public"."members_in_teams";

drop view if exists "public"."profile_teams";

create table "public"."maps" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "thumbnail" text not null,
    "radar" text not null
);


alter table "public"."maps" enable row level security;

CREATE UNIQUE INDEX maps_pkey ON public.maps USING btree (id);

CREATE UNIQUE INDEX unique_map_name ON public.maps USING btree (name);

alter table "public"."maps" add constraint "maps_pkey" PRIMARY KEY using index "maps_pkey";

alter table "public"."maps" add constraint "unique_map_name" UNIQUE using index "unique_map_name";

create or replace view "public"."profile_teams" as  SELECT p.id AS player_id,
    p.uuid AS profile_uuid,
    t.name AS team_name,
    t.id AS team_id,
    t.organization AS org,
    tm.role AS player_role,
    tm.inserted_at AS joined_at,
    count(*) OVER (PARTITION BY t.id) AS total_players
   FROM ((team_members tm
     JOIN teams t ON ((tm.team_id = t.id)))
     JOIN profiles p ON ((tm.player_id = p.id)));


create policy "Enable delete for admins"
on "public"."maps"
as permissive
for delete
to public
using ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id IN ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));


create policy "Enable insert for admins"
on "public"."maps"
as permissive
for insert
to public
with check ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id IN ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));


create policy "Enable read access for all users"
on "public"."maps"
as permissive
for select
to public
using (true);


create policy "Enable update for admins"
on "public"."maps"
as permissive
for update
to public
using ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id IN ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))))
with check ((auth.uid() IN ( SELECT profiles.uuid
   FROM profiles
  WHERE (profiles.id IN ( SELECT user_roles.user_id
           FROM user_roles
          WHERE (user_roles.role_id IN ( SELECT roles.id
                   FROM roles
                  WHERE ((roles.name)::text = 'ADMIN'::text))))))));



